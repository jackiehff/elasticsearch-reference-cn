[[shard-request-cache]]
=== 分片请求缓存

当在一个或者多个索引上执行搜索请求时，每个参与的分片会再本地执行搜索，并返回本地结果给 _协调_
节点，然后由协调节点将每个分片数据合并在一起成为一个总的结果集。

分片请求缓存模块缓存了每个分片上的本地结果，这让那些经常被使用的搜索请求（往往也是很重的请求）
能很快的返回结果。请求缓存非常适合日志的使用场景， 因为仅仅最新的索引会被更新，老索引中的数据
将会从缓存中获得。

[IMPORTANT]
===================================

目前为止， 请求缓存仅仅会缓存  `size=0` 的那些搜索请求，所以不会缓存搜索结果 `hits`，但是
会缓存 `hits.total`,  <<search-aggregations,aggregations>>, 和
<<search-suggesters,suggestions>>.

使用 `now` (见 <<date-math>>) 的查询不会被缓存。
===================================

[float]
==== 缓存失效

缓存是智能的 -- 它能保证和未缓存结果一致的 _近实时性_。

缓存会在分片更新，且真正有数据变化的时候自动失效。 换句话说， 你总会从缓存结果中得到和未缓存搜
索请求一样的结果。

更新间隔时间越长，缓存结果将保存的越久。 如果缓存满了，最近最少使用的缓存值将被剔除出去。

缓存可以通过 <<indices-clearcache,`clear-cache` API>>被手动设置为过期。

[source,js]
------------------------
curl -XPOST 'localhost:9200/kimchy,elasticsearch/_cache/clear?request_cache=true'
------------------------

[float]
==== 默认开启缓存

缓存默认没有开启，但是可以在创建索引时按如下方式开启：

[source,js]
-----------------------------
curl -XPUT localhost:9200/my_index -d'
{
  "settings": {
    "index.requests.cache.enable": true
  }
}
'
-----------------------------

<<indices-update-settings,`update-settings`>> API 动态开启或者禁用。

[source,js]
-----------------------------
curl -XPUT localhost:9200/my_index/_settings -d'
{ "index.requests.cache.enable": true }
'
-----------------------------

[float]
==== 开启基于请求的缓存

 `request_cache` 请求参数可以用来开启或者禁用  *per-request* 的缓存，如果设置了该值，将
 会覆盖索引级别的设置。

[source,js]
-----------------------------
curl 'localhost:9200/my_index/_search?request_cache=true' -d'
{
  "size": 0,
  "aggs": {
    "popular_colors": {
      "terms": {
        "field": "colors"
      }
    }
  }
}
'
-----------------------------

IMPORTANT: 如果你的查询使用了脚本，其查询结果不能确定（使用了随机函数或者引用了当前时间）， 你
应该设置 `request_cache` 标志位 `false`来禁止该请求的缓存。

[float]
==== 缓存健

整个JSON 串会被作为缓存的健，这意味着JSON改变了，如输出结果顺序发生改变，则这个缓存的健也改变了。

TIP: 大多数JSON库支持 _规范化_模式来确保JSON 健的输出始终保持同样的顺序。这个规范化模式可以用来
保证同一个请求始终被序列化为一个相同的健。

[float]
==== 缓存设置

缓存是节点级别管理的， 默认堆内存的 `1%`为其最大值。 这可以通过配置文件  `config/elasticsearch.yml`
中的配置项来更改：

[source,yaml]
--------------------------------
indices.requests.cache.size: 2%
--------------------------------

另外，你可以通过 +indices.requests.cache.expire+ 来为缓存结果设置一个TTL值，但是没有理由
那样做。记住过期结果将在索引更新的时候被自动清除掉，这个设置仅仅用作配置的完整性而提供。

[float]
==== 缓存使用量监控

缓存的大小（字节数）和被剔除出缓存的数量，可以通过索引的 <<indices-stats,`indices-stats`>>
API来查看。
[source,js]
------------------------
curl 'localhost:9200/_stats/request_cache?pretty&human'
------------------------

或者通过每个节点的API <<cluster-nodes-stats,`nodes-stats`>> 查看:

[source,js]
------------------------
curl 'localhost:9200/_nodes/stats/indices/request_cache?pretty&human'
------------------------
