[[modules-discovery-zen]]
=== Zen 发现

Zen发现是elasticsearch内置的默认发现模块。 它提供了单播发现，但可以扩展以支持云环境和其他
形式的发现。

Zen与其他模块结合在一起使用，比如，所有节点间通信是通过 <<modules-transport,transport>>
模块完成的。

它被分成几个子模块，分别在下面解释：

[float]
[[ping]]
==== Ping

这是一个节点在发现机制中用来发现其他节点的过程。

[float]
[[unicast]]
===== 单播

单播发现需要一组主机名来作为 gossip 路由， 提供了如下以 `discovery.zen.ping.unicast`为
前缀的配置。

[cols="<,<",options="header",]
|=======================================================================
|配置 |描述
|`hosts` |支持一个数组或者逗号分隔的字符串。每个值是如 `host:port` 的形式, 或者
`host:port1-port2`的形式。注意如果是IPv6的主机，需要用中括号包起来。
默认为 `127.0.0.1, [::1]`
|=======================================================================

单播发现使用 <<modules-transport,transport>> 模块来执行发现过程。

[float]
[[master-election]]
==== 主节点选举

ping这个操作作为主节点中的一部分，要么是在主节点选举或者有节点加入时需要用到，这是自动完成的。
`discovery.zen.ping_timeout`（默认为 `3s`） 允许适当调节选举时间以应对网络慢或者拥塞（该值
越高，选举主节点失败几率就越小）。 当节点加入时，节点会发送一个加入请求给主节点，并带有超时时间
( `discovery.zen.join_timeout`)， 并在超时发送后重试20次。

当主节点停止工作或者遇到问题后，集群中得节点会开始互相ping，并选举一个新的主节点。这个ping的过程
还可以作为一种保护机制，以防止因为网络故障导致该节点错误认为是主节点发生故障。这种情况下，该节点
会接收到其他节点返回的当前主节点的消息。

如果 `discovery.zen.master_election.filter_client` 设置为 `true`, 客户端节点的ping的结果
将会咋主节点选举时被忽略。 如果 `discovery.zen.master_election.filter_data` 是 `true`，
非可成为主节点的数据节点上的ping的结果会被忽略，默认为 `false`。在主节点选举时， 主节点候选节点中得ping
结果总会被处理。

如果将 `node.master`设置为 `false`,则该节点不会被选为主节点。 注意，如果一个节点时客户端节点
（ `node.client` 为 `true`），该节点不会被选为主节点（ `node.master`被自动设置为 `false`)。

参数 `discovery.zen.minimum_master_nodes` 设置了最小可成为主节点的数量，以便选举新的主节
点和选出来得主节点用来确认它们之间的关系。这一设置同样控制了集群运行中需要保持的可成为主节点的数量，
如果这一条件不满足，当前主节点会停止工作，会开始新的主节点选举。

这个参数应该设置为超过集群中可成为主节点的半数。建议避免可成为主节点数量为2，因为2的超过半数还是2，那么
任何一个节点的宕机都可能导致集群的不可用。

[float]
[[fault-detection]]
==== 错误探测

集群中运行着两个错误探测。 第一个是主节点发起的，用来ping集群中所有其他节点，并验证他们是否还
存活着。 另一方面，其他节点也同时ping主节点并确认其依然存活着，否则会开始一个主节点选举操作。

下面以 `discovery.zen.fd`开头的配置选项控制了错误探测的过程：


[cols="<,<",options="header",]
|=======================================================================
|配置项 |描述
|`ping_interval` |多久开始一个新的ping请求，默认为 `1s`。

|`ping_timeout` |ping请求的响应超时时间，默认为 `30s`。

|`ping_retries` |多少次的ping失败/超时被认为节点的ping请求失败。
|=======================================================================

[float]
==== 集群状态更新

主节点是集群中唯一能够更新集群状态的节点。主节点一次更新集群的一个状态，并将状态的更新同步给
集群中其他节点上。每个节点收到同步的消息后，更新自己的集群状态，并回复主节点。主节点等待每个节点
的返回响应，然后处理队列中得下一个状态更新。 `discovery.zen.publish_timeout` 默认为 30秒
，并可以通过 <<cluster-update-settings,cluster update settings api>> 动态更新。

[float]
[[no-master-block]]
==== 无主节点阻塞操作

为了集群能正常工作，必须有一个活的主节点，并且可成为主节点的节点数需要满足
`discovery.zen.minimum_master_nodes` 的配置。 `discovery.zen.no_master_block`
决定了再没有活的主节点时哪些操作会被阻塞。
 `discovery.zen.no_master_block` 配置有两个可选值：

[horizontal]
`all`:: 节点上所有操作--即读写操作--都被拒绝。这也包含对集群状态的读取和更新API，例如读取索引设置，
更新映射和更新集群状态API。
`write`:: (默认值) 写操作会被拒绝，读操作会基于上一次集群的配置而成功读取。这个可能导致读取了
部分过期的数据，这是因为该节点有可能被集群中其他节点隔离开了。

 `discovery.zen.no_master_block` 配置项并不影响节点级别的api（如集群统计信息，节点信息和节点状态）
 ，这些api不会被阻塞，而是尝试在节点上执行。
