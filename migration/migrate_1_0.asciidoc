[[breaking-changes-1.0]]
== 1.0 版本中的重大变更

本节讨论了应用程序升级 Elasticsearch 到 1.0 版本时你应该要注意到的一些变更.

=== 操作系统和设置

* Elasticsearch 现在默认在前台运行. 命令行中不再有 `-f` 标记. 相反, 想要 elasticsearch 作为守护进程运行需要使用 `-d` 标记:

[source,sh]
---------------
./bin/elasticsearch -d
---------------

* 传递的命令行选项现在不需要带 `-Des.` 前缀了, 例如:

[source,sh]
---------------
./bin/elasticsearch --node.name=search_1 --cluster.name=production
---------------

* Linux 64位系统上的 Elasticsearch 现在默认使用 <<mmapfs,`mmapfs`>>.  确保你将 <<setup-service,`MAX_MAP_COUNT`>> 的值
设置为一个足够高的数字.  RPM 和 Debian 包默认将这个值设为 `262144`.

* RPM 和 Debian 包不再默认启动 Elasticsearch.

* `cluster.routing.allocation` 设置 (`disable_allocation`,
  `disable_new_allocation` 以及 `disable_replica_location`) 已经 <<modules-cluster,被单个设置取代>>:
+
[source,yaml]
---------------
cluster.routing.allocation.enable: all|primaries|new_primaries|none
---------------

=== 数据和信息API

<<cluster-state,`cluster_state`>>, <<cluster-nodes-info,`nodes_info`>>,
<<cluster-nodes-stats,`nodes_stats`>> 以及 <<indices-stats,`indices_stats`>>
APIs 都已经变更, 他们的格式更具 RESTful 风格并且不那么笨拙.

例如, 如果你只想要 `cluster_state` 的 `nodes` 部分, 以前你使用的是:

[source,sh]
---------------
GET /_cluster/state?filter_metadata&filter_routing_table&filter_blocks
---------------

现在你可以使用:

[source,sh]
---------------
GET /_cluster/state/nodes
---------------

对于 `nodes_stats` API 也一样, 如果你只想要 `transport` 和 `http` metrics, 以前你使用的是:

[source,sh]
---------------
GET /_nodes/stats?clear&transport&http
---------------

现在你可以使用:

[source,sh]
---------------
GET /_nodes/stats/transport,http
---------------

想要了解全部细节参见上面的链接.


=== 索引API

`mapping`, `alias`, `settings` 以及 `warmer` 索引 APIs 都类似, 但是在URL以及响应体中的顺序上有细微差别.  例如, 新增一个 mapping 和一个 warmer 看起来略微不同:

[source,sh]
---------------
PUT /{index}/{type}/_mapping
PUT /{index}/_warmer/{name}
---------------

这些URL已经被统一成:

[source,sh]
---------------
PUT /{indices}/_mapping/{type}
PUT /{indices}/_alias/{name}
PUT /{indices}/_warmer/{name}

GET /{indices}/_mapping/{types}
GET /{indices}/_alias/{names}
GET /{indices}/_settings/{names}
GET /{indices}/_warmer/{names}

DELETE /{indices}/_mapping/{types}
DELETE /{indices}/_alias/{names}
DELETE /{indices}/_warmer/{names}
---------------

所有 `{indices}`, `{types}` 以及 `{names}` 参数可以替换如下:

  * `_all`, `*` 或空白 (ie left out altogether), 都表示 ``all''
  * 通配符,像 `test*`
  * 逗号分隔列表: `index_1,test_*`

唯一的例外是 `DELETE` 不接受空白 (缺失的) 参数. 如果你想要删除某个东西, 你需要明确.

类似地, `GET` 的返回值已经使用如下规则进行统一:

* 只返回已存在的值. 如果你尝试 `GET` 一个不存在的映射, 那么返回结果将会是一个空对象: `{}`.  如果请求的 mapping/warmer/alias/setting 不存在, 我们不会再抛出 `404`.

* 响应格式总是有索引名称, 然后是section, 接着是元素名称, 例如:
+
[source,js]
---------------
{
    "my_index": {
        "mappings": {
            "my_type": {...}
        }
    }
}
---------------
+
对于 `get_mapping` API 来说这是一个重大变更.

未来我们也会提供复数形式来允许在单个请求中放置多个映射.

想要了解更多信息参见 <<indices-put-mapping,`put-mapping`>>, <<indices-get-mapping,`get-mapping`>>, <<indices-get-field-mapping,`get-field-mapping`>>,
<<indices-update-settings,`update-settings`>>, <<indices-get-settings,`get-settings`>>, <<indices-warmers,`warmers`>> 以及 <<indices-aliases,`aliases`>> .

=== 索引请求

之前文档可以作为自身被索引, 或者包装在一个指定了 `type` 名称的外部对象中:

[source,js]
---------------
PUT /my_index/my_type/1
{
  "my_type": {
     ... doc fields ...
  }
}
---------------

当一个文档还包括有着和 `type` 一样的名称的字段时, 这样会导致有些模棱两可. 我们不再接受外部的 `type` 包装器, 但是
在带有 `index.mapping.allow_type_wrapper` 设置的 index-by-index 基础上, 这种行为可以重新被启用.

=== 搜索请求

虽然 `search` API 采用一个顶层的 `query` 参数, <<search-count,`count`>>, `delete-by-query` 以及
<<search-validate,`validate-query`>> 请求期望整个主体是一个查询. 这些现在 _需要_ 一个顶层的 `query` 参数:

[source,js]
---------------
GET /_count
{
    "query": {
        "match": {
            "title": "Interesting stuff"
        }
    }
}
---------------

而且, 搜索中的顶层 `filter` 参数已经被重命名为 <<search-request-post-filter,`post_filter`>>, 为了表明
它不应该被用作过滤搜索结果的首选方式 (使用 <<query-dsl-bool-query,`bool` 查询>> 作为代替), 而
只是用于在计算聚合操作之后过滤结果.

下面的示例在所有匹配的文档中统计数量最多的color, 但是仅返回 color 为 `red` 的文档:

[source,js]
---------------
GET /_search
{
    "query": {
        "match_all": {}
    },
    "aggs": {
        "colors": {
            "terms": { "field": "color" }
        }
    },
    "post_filter": {
        "term": {
            "color": "red"
        }
    }
}
---------------

=== 多字段

Multi-fields 已死! multi-fields 不朽!  现在, 字段类型 `multi_field` 已经被移除. 相
反, 任何核心字段类型 (不包括 `object` 和 `nested`) 现在接受一个 `fields` 参数.它是同样
的东西, 但是更美观. 以前的写法是:

[source,js]
---------------
"title": {
    "type": "multi_field",
    "fields": {
        "title": { "type": "string" },
        "raw":   { "type": "string", "index": "not_analyzed" }
    }
}
---------------

你现在可以这样写:

[source,js]
---------------
"title": {
    "type": "string",
    "fields": {
        "raw":   { "type": "string", "index": "not_analyzed" }
    }
}
---------------

已存在的多个字段将自动地升级为新的格式.

而且, 为了索引索引多个字段到单个的 ``custom +_all+ field'' 中, 你必须要使用隐晦的 `path` 和 `index_name` 参
数, 现在你可以使用 <<copy-to,`copy_to` 参数>> 作为代替.

=== 禁用词表

之前 <<analysis-standard-analyzer,`标准`>> 和
<<analysis-pattern-analyzer,`模式`>> 分析器默认使用了英语禁用词列表, 结果导致一些难以调试的
索引问题.  现在它们被设置成使用空的禁用词列表 (例如 `_none_`) 作为代替.

=== 不带年份的日期

当日期没有指定年份, 例如: `Dec 15 10:00:00` , 在索引和范围搜索期间它们被当作2000年中的日期...
除了大于包括边界的 `lte`, 它们被当做1970年中的日期!  现在, 所有
https://github.com/elasticsearch/elasticsearch/issues/4451[没有带年份的日期]默认使用
`1970` 这个年份.

=== 参数

* 地理查询原来使用 `英里` 作为默认单位. 我们 http://en.wikipedia.org/wiki/Mars_Climate_Orbiter[都知道在 NASA 发生了什么], 因为那个决定.
现在默认的单位是 https://github.com/elasticsearch/elasticsearch/issues/4515[`米`].

* 对于所有支持 _fuzziness_ 的查询, `min_similarity`, `fuzziness` 以及 `edit_distance` 参数
已经被统一成单个参数 `fuzziness`.  关于可接受的值的详细信息参见 <<fuzziness>> .

* `ignore_missing` 参数已经被 `expand_wildcards`, `ignore_unavailable` 以及 `allow_no_indices` 参数
取代, 它们都有合理的默认值.  想要了解更多信息参见 <<multi-index,多索引文档>> .

* 对于破坏性的操作, 像删除索引, 需要带上索引名称 (或模式) :
+
[source,sh]
---------------
# v0.90 - delete all indices:
DELETE /

# v1.0 - delete all indices:
DELETE /_all
DELETE /*
---------------
+
将 `action.destructive_requires_name` 设置为 `true` 提供了更进一步的安全性, 通过在破
坏性行为上禁用通配符扩展.

=== 返回值

* 由于 `ok` 返回值没有增加任何有用信息, 因此它已经从所有响应体中移除.

* 在所有相关的API中, `found`, `not_found` 以及 `exists` 返回值已经统一为 `found` .

* 字段值, 作为对 <<search-request-fields,`fields`>> 参数的响应, 现在总是作为数组返回.
一个字段可以有一个或多个值, 这意味着它们有时候作为标量返回有时候作为数组返回. 若总是返回数
组, 将简化用户代码. 这个规则唯一的例外是当 `fields` 用来检索像 `routing` 值这样的元数据
时, 它总是单数. 元数据字段总是作为标量.
+
`fields` 参数旨在用于检索存储的字段, 而不是从 `_source` 中提取的字段. 这意味着它将不会再用于
返回整个对象并且不会再接受 `_source.fieldname` 格式. 既然如此你应该使用
<<search-request-source-filtering,`_source`&#32; `_source_include` 和 `_source_exclude`>>
参数来代替.

* 像 `index.analysis.analyzer.default` 这样的设置现在作为正确嵌套的 JSON 对象返回, 这样
可以让它们更简单的使用编程式的方式:
+
[source,js]
---------------
{
    "index": {
        "analysis": {
            "analyzer": {
                "default": xxx
            }
        }
    }
}
---------------
+
通过在查询字符串中传递 `?flat_settings`, 你可以选择以扁平化的格式返回它们.

* <<indices-analyze,`analyze`>> API 不再支持文本响应格式, 但是支持 JSON 和 YAML.

=== 废弃

* `text` 查询已经被移除. 取而代之的是 <<query-dsl-match-query,`match`>> 查询.

* `field` 查询已经被移除. 取而代之的是 <<query-dsl-query-string-query,`query_string`>> 查询.

* 每个用于增强文档的 `_boost` 字段已经被移除. 取而代之的是 <<query-dsl-function-score-query,`function_score`>>.

* 映射中的 `path` 参数已经被废弃. 取而代之的是 <<copy-to,`copy_to`>> 参数.

* 将不再支持 `custom_score` 和 `custom_boost_score`. 取而代之的是 <<query-dsl-function-score-query,`function_score`>>.

=== 过滤器

过滤器已经被重新设计并且正因为如此专用的 `_percolator` 索引不再被过滤器使用, 取而代之的是过
滤器使用了一个专用的 `.percolator` 类型. 阅读 http://www.elastic.co/blog/percolator-redesign-blog-post[重新设计的过滤器]
这篇描述为什么要重新设计过滤器的博客.

Elasticsearch 在升级时将 *不会* 删除 `_percolator` 索引, 只有过滤api不会使用存储在
`_percolator` 索引中的查询. 为了使用已存储的查询, 你只需要从`_percolator` 索引重新索引查询
到保留的 `.percolator` 类型下的任何索引中. 过滤查询存储的格式 *没有* 改变. 因此一个简单的
可以执行扫描搜索到检索所有过滤器查询并且执行一个到另一个索引中的批量请求的脚本应该是足够的.
