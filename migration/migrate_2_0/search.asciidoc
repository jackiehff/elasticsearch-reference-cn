[[breaking_20_search_changes]]
=== 搜索变更

==== 部分字段

部分字段已经被移除以支持 <<search-request-source-filtering,source过滤>>.

==== 废弃 `search_type=count`

`count` 搜索类型已经被废弃. 这个搜索类型的所有好处现在可以通过使用 (默认的) `query_then_fetch`
搜索类型以及设置 `size` 为 `0` 来实现.

==== 计数 api 内部使用搜索 api

计数 api 现在是 `size` 设置为 0 的搜索 api 的一个快捷方式. 结果就是, 整个的失败会导致返回异常
而不是 `count` 设置为 `0` 的一个正常返回以及分片失败.

==== 默认返回所有存储的元字段

之前像 `_routing`, `_timestamp` 等等这样的元字段只有当明确地使用 `fields` 参数请求的时候
才会被包括在搜索结果中.  现在默认会返回所有有存储值的元字段. 另外, 它们现在在顶层返回 (与
`_index`, `_type` 以及 `_id` 一起) 而不是在 `fields` 元素中.

例如, 下面的请求:

[source,sh]
--------------- 
GET /my_index/_search?fields=foo
---------------

可能会返回:

[source,js]
---------------
{
   [...]
   "hits": {
      "total": 1,
      "max_score": 1,
      "hits": [
         {
            "_index":     "my_index",
            "_type":      "my_type",
            "_id":        "1",
            "_score":     1,
            "_timestamp": 10000000, <1>
            "fields": {
              "foo" : [ "bar" ]
            }
         }
      ]
   }
}
---------------
<1> 默认返回 `_timestamp`, 并且在顶层.


==== 脚本字段

1.x 版本中的脚本字段仅作为单个值返回. 即使是脚本的返回值是个列表, 它会作为一个包含数组的数组返回:

[source,js]
---------------
"fields": {
  "my_field": [
    [
      "v1",
      "v2"
    ]
  ]
}
---------------

在 Elasticsearch 2.0 版本中, 返回列表值的脚本被当作多值字段. 同样的示例会返回下面的响应, 其
中值在单个数组中.

[source,js]
---------------
"fields": {
  "my_field": [
    "v1",
    "v2"
  ]
}
---------------

==== 用于日期字段的时区(Timezone)

指定用于查询或聚合中类型为 `date` 的字段上的 `time_zone` 参数现在必须是一个 ISO 8601 UTC 偏移量, 或者一个时区ID. 例如,
`+1:00` 这个值现在必须写成 `+01:00`.

==== 仅高亮查询出的字段

`require_field_match` 选项的默认值已经从 `false` 变成为 `true`, 意味着高亮器默认将只考
虑查询的字段.

这就是说, 当查询 `_all` 字段时, 试图高亮除 `_all` 字段外的任何字段将不会产生高亮片段. 查询需
要高亮的相同字段是拿回高亮片段更干净的做法. 否则当高亮时, `require_field_match` 选项可以设置为 `false`
来完全忽略字段名称.

postings高亮器不再支持 `require_field_match` 选项, 它只会高亮查询的字段.

==== Postings 高亮器不支持 `match_phrase_prefix`

postings highlighter现在不支持类型设置为 `phrase_prefix` 的 `match` 查询 (或 `match_phrase_prefix` 查询).
不会返回高亮片段.
