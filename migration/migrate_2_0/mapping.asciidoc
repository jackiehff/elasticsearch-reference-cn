[[breaking_20_mapping_changes]]
=== 映射(Mapping)变更

映射中的一些变更是为了消除歧义并确保不会创建冲突的映射.

一个主要的变更是在继续索引之前, 动态地新增字段必须要让映射获得 master 节点的确认. 这样做是为了避免相同索引中的不同分片为相同的字段动态地增加不同的映射这个问题.  这些冲突的映射可以默默地返回不正确的结果并且可能会导致索引失败.

这个改变会导致频繁地新增许多字段时索引变慢.我们正在寻找优化这个过程的解决方式, 但是对于这种极端的使用场景我们选择安全性高于性能.

==== 冲突的字段映射

同一个索引不同类型中有着相同名称的字段必须要有相同的映射, 除了 <<copy-to>>, <<dynamic>>,
<<enabled>>, <<ignore-above>>, <<include-in-all>> 以及 <<properties>>
参数以外, 每个字段可能会有不同的设置.

[source,js]
---------------
PUT my_index
{
  "mappings": {
    "type_one": {
      "properties": {
        "name": { <1>
          "type": "string"
        }
      }
    },
    "type_two": {
      "properties": {
        "name": { <1>
          "type":     "string",
          "analyzer": "english"
        }
      }
    }
  }
}
---------------
<1> 两个 `name` 字段有冲突的映射并且会阻止 Elasticsearch 启动.

由于存在冲突的字段映射, Elasticsearch 将不会启动. 这些索引必须要删除或使用一个新的映射重新索引.

put mappings API 的 `ignore_conflicts` 选项已经被移除. 冲突现在不能被忽略.

==== 字段不能被简称引用

字段现在不能使用简称来引用了. 相反, 需要字段的全路径.  例如:

[source,js]
---------------
PUT my_index
{
  "mappings": {
    "my_type": {
      "properties": {
        "title":     { "type": "string" }, <1>
        "name": {
          "properties": {
            "title": { "type": "string" }, <2>
            "first": { "type": "string" },
            "last":  { "type": "string" }
          }
        }
      }
    }
  }
}
---------------
<1> 这个字段被称为 `title`.
<2> 这个字段被称为 `name.title`.

在以前, 当使用简称 `title` 时, 上述示例中的两个 `title` 字段可能会相互混淆.

==== 移除类型名称前缀

在以前, 在两个不同类型中有着相同名称的两个字段可以通过在字段名称前面附加类型名称来消除歧义.  副作用是它会在相关查询的类型名称上增加一个过滤器.  这个功能是有歧义的 -- 类型名称可能会和字段名称混淆 -- 并且不是所有地方都适用, 比如聚合.

相反, 字段应该指定全路径而不用类型名称前缀. 如果你想要按 `_type` 字段过滤, 要么在 URL 中指定类型, 要么显示的增加一个过滤器.

下面的示例在 1.x 版本中查询:

[source,js]
----------------------------
GET my_index/_search
{
  "query": {
    "match": {
      "my_type.some_field": "quick brown fox"
    }
  }
}
----------------------------

将会在 2.0 版本中被重写为:

[source,js]
----------------------------
GET my_index/my_type/_search <1>
{
  "query": {
    "match": {
      "some_field": "quick brown fox" <2>
    }
  }
}
----------------------------
<1> 类型名称可以作为一个过滤器在URL中指定.
<2> 字段名称可以不指定类型前缀.

==== 字段名称不能包含圆点

在 1.x 版本中, 创建字段的名称中可以带圆点, 例如:

[source,js]
----------------------------
PUT my_index
{
  "mappings": {
    "my_type": {
      "properties": {
        "foo.bar": { <1>
          "type": "string"
        },
        "foo": {
          "properties": {
            "bar": { <1>
              "type": "string"
            }
          }
        }
      }
    }
  }
}
----------------------------
<1> 这两个字段没办法区分, 因为它们都称为 `foo.bar`.

你不能再创建名称中带有圆点的字段.

==== 类型名称不能以圆点开始

在 1.x 版本中, 如果类型名称中包含一个圆点, Elasticsearch 会发出一个警告, 例如 `my.type`.现在由于类型名称不再用于在不同的类型中区分字段, 这个警告已经放宽了: 类型名称现在可以包含圆点, 但是不能以圆点作为 *开始* .  唯一的例外是这个特殊的 `.percolator` 类型.

==== 类型名称不能超过255个字符

映射的类型名称不能超过255个字符. 长的类型名称可以继续作用于升级之前创建的索引上, 但是不能在新的索引中创建名称很长的类型.

==== 类型不再被删除

在 1.x 版本中可以使用 delete mapping API 删除一个类型映射, 连同所有这种类型的文档. 现在不再支持了, 因为类型中残留的字段可能仍然在索引中, 这样导致后面的失败.

相反, 如果你要删除一个类型映射, 你应该重新索引一个不包含这个映射的新索引. 如果你只需要删除属于这种类型的文档, 那么使用 delete-by-query 插件来代替.

[[migration-meta-fields]]
==== 类型元字段

<<mapping-fields,元字段>> 相关的配置选项被删除, 这样使它们更可靠:

* `_id` 配置不允许再改变.  如果你需要排序, 使用 <<mapping-uid-field,`_uid`>> 字段代替.
* `_type` 配置不允许再改变.
* `_index` 配置不允许再改变.
* `_routing` 配置仅限于在需要的时候标记路由.
* `_field_names` 配置仅限于禁用字段.
* `_size` 配置仅限于启用字段.
* `_timestamp` 配置仅限于启用字段, 设置格式以及默认值.
* `_boost` 已经被移除.
* `_analyzer` 已经被移除.

重要的是, *元字段不再作为文档主体的一部分指定.*  相反, 它们必须在查询字符串参数中指定.  例如, 在 1.x 版本中, `routing` 可以像下面这样指定:

[source,json]
-----------------------------
PUT my_index
{
  "mappings": {
    "my_type": {
      "_routing": {
        "path": "group" <1>
      },
      "properties": {
        "group": { <1>
          "type": "string"
        }
      }
    }
  }
}

PUT my_index/my_type/1 <2>
{
  "group": "foo"
}
-----------------------------
<1> 这个 1.x 版本的映射告诉 Elasticsearch 从文档主体中的 `group` 字段中提取 `routing` 值.
<2> 这个索引请求使用的 `routing` 值是 `foo`.

在 2.0 版本中, routing 必须显示地指定:

[source,json]
-----------------------------
PUT my_index
{
  "mappings": {
    "my_type": {
      "_routing": {
        "required": true <1>
      },
      "properties": {
        "group": {
          "type": "string"
        }
      }
    }
  }
}

PUT my_index/my_type/1?routing=bar <2>
{
  "group": "foo"
}
-----------------------------
<1> 路由可以标记为必须的以确保在索引期间不被忘记.
<2> 这个索引请求使用的 `routing` 值是 `bar`.

==== `_timestamp` 和 `_ttl` 已废弃

`_timestamp` 和 `_ttl` 字段已被废弃, 但在 2.x系列的剩余部分中仍将保留其功能.

使用一个标准的 <<date,`date`>> 字段并显示地设置值, 而不是 `_timestamp` 字段.

将会在未来的某个版本中使用一个新的 TTL 实现来取代目前的 `_ttl` 的功能, 可能会使用不同的语义并且不会依赖于 `_timestamp` 字段.

==== 分析器映射

在以前, `index_analyzer` 和 `search_analyzer` 可以单独地设置, 而 `analyzer` 设置可以同时设置. `index_analyzer` 设置已经被移除以支持只使用 `analyzer` 设置.

如果只设置 `analyzer` , 它将会在索引和搜索时使用.  要在搜索时使用不同的分析器, 同时指定 `analyzer` 和 `search_analyzer`.

`index_analyzer`, `search_analyzer` 以及 `analyzer` 类型级别的设置也已经被移除, 因为不再基于类型名称来选择字段.

允许为每个文档设置一个分析器的 `_analyzer` 元字段也已经被移除. 在原来的索引上它会被忽略.

==== 日期字段和Unix时间戳

在以前, `date` 字段首先会试着将值解析成一个Unix时间戳 -- 格林威治标准时间以来的毫秒数作 -- 在试着使用它们定义的日期 `format` 之前.  这意味着像 `yyyyMMdd` 这样的格式永远都不能工作, 因为值将被解析成时间戳.

在 2.0 版本中, 我们新增了两种格式: `epoch_millis` 和 `epoch_second`.  只有使用了这些格式的日期字段才能解析时间戳.

这些格式不能用于动态的模板中, 因为它们无法区分长整型的值.

==== 默认日期格式

默认的日期格式已经从 `date_optional_time` 变成 `strict_date_optional_time`, 它需要一个4位数的年, 和一个2位月和天(以及可选的2位数的小时, 分和秒).

一个动态新增的日期字段默认包括 `epoch_millis` 格式来支持时间戳解析.  例如:

[source,js]
-------------------------
PUT my_index/my_type/1
{
  "date_one": "2015-01-01" <1>
}
-------------------------
<1> `format` 是: `"strict_date_optional_time||epoch_millis"`.

==== `mapping.date.round_ceil` 设置

用于日期数学解析的 `mapping.date.round_ceil` 设置已经被移除.

[[migration-bool-fields]]
==== 布尔字段

布尔字段原来使用带有 `F` 的字符串 fielddata 表示 `false` 以及 `T` 表示 `true`. 它们已经被重构成使用数字 fielddata, `0`
代表 `false`, `1` 代表 `true`. 因此, 当应用于布尔字段时, 下面的API的响应格式发生了改变: 返回 `0`/`1` 而不是 `F`/`T`:

* <<search-request-fielddata-fields,fielddata 字段>>
* <<search-request-sort,排序值>>
* <<search-aggregations-bucket-terms-aggregation,terms 聚合>>

另外, terms 聚合为布尔使用一个自定义格式化器 (像为日期和ip地址, 使用支持的数字) 以便返回用户友好的布尔字段描述: `false`/`true`:

[source,js]
---------------
"buckets": [
  {
     "key": 0,
     "key_as_string": "false",
     "doc_count": 42
  },
  {
     "key": 1,
     "key_as_string": "true",
     "doc_count": 12
  }
]
---------------

==== 移除 `index_name` 和 `path`

`index_name` 设置用于改变 Lucene 字段的名称, 而 `path` 设置用于 `object` 字段来决定Lucene 字段是使用全路径 (包括付对象字段) 还是仅仅是最终的 `name`.

这些设置已经被移除, 因为可以使用<<copy-to>> 参数更好的达到它们的目的.

==== Murmur3 字段

`murmur3` 类型的字段不能再改变 `doc_values` 或 `index` 设置. 它们总是被映射成如下这样:

[source,js]
---------------------
{
  "type":       "murmur3",
  "index":      "no",
  "doc_values": true
}
---------------------

==== 不支持配置文件中的映射

在配置文件中指定映射的功能已经被移除. 想要指定默认映射来应用于多个索引, 可以使用 <<indices-templates,索引模板>> 代替.

伴随着这个改变, 下面的设置已经被移除:

* `index.mapper.default_mapping_location`
* `index.mapper.default_percolator_mapping_location`

==== Fielddata 格式

既然文档值是 fielddata 的默认值, 专用的内存格式已经变成一个难以理解的选项. 下面这些 fielddata 格式已经被移除:

* 字符串字段上的 `fst`
* 地理位置点上的 `compressed`

将使用默认的 fielddata 格式.

==== Posting 和 doc-values 编解码器

不能在映射中指定每个字段 postings 和 doc values 格式. 这个设置在2.0之前版本创建的索引上会被忽略并且会导致2.0或之后版本中创建的索引上映射解析失败.对于老的索引, 这意味着新的片段将使用当前编解码器的默认postings 和 doc values 格式来写.

仍然可以通过使用 `index.codec` 设置来改变整个编解码器. 请无论如何要注意不建议使用一个非默认的编解码器, 因为它可能会导致未来版本的 Elasticsearch 不能读取索引.

==== 压缩和压缩阈

`compress` 和 `compress_threshold` 选项已经从`_source` 字段以及类型 `binary` 的字段中
移除.  这些字段默认会被压缩. 如果你想要提高压缩级别, 可以使用新的
<<index-codec,`index.codec: best_compression`>> 设置来代替.

==== position_offset_gap

`position_offset_gap` 选项被重命名为 'position_increment_gap'. 这样做是为了消除困惑.
 Elasticsearch 的 'position_increment_gap' 现在直接映射到 Lucene 的 'position_increment_gap'

`position_increment_gap` 现在的默认值是 100. Elasticsearch 2.0.0版本中创建的索引将使用
默认值 100, 而 2.0.0 版本之前创建的索引将继续使用原来的默认值 0. 这样做是为了防止短语查询意外地
在相同term的不同值间匹配. 特别是100被用来与99的短语查询仅匹配一个字段的单个值.
