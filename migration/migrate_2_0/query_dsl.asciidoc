[[breaking_20_query_dsl_changes]]
=== Query DSL变更

==== 合并查询和过滤器

查询和过滤器已经被合并 -- 现在所有的过滤器子句都是查询子句. 而且查询子句现在可以用于
 _查询上下文_ 或 _过滤器上下文_ 中:

查询上下文::

查询上下文中使用的查询将会计算相关性分数并且不能被缓存. 当过滤器上下文不适用时则使用查询上下文.

过滤器上下文::
+
--

过滤器上下文中使用的查询不会计算相关性分数并且可以被缓存. 过滤器上下文被下面这些引用:

* `constant_score` 查询
* `bool` 查询中 `must_not` 和 (新增的) `filter` 参数
* `function_score` 查询中的 `filter` 和 `filters` 参数
* 像 `post_filter` 搜索参数, 或者再聚合或索引别名中被称为 `filter` 的任何 API
--

这种改变带来的结果是, `terms` 过滤器的 `execution` 选项现在被废弃并且即使提供了也会被忽略.

==== `or` 和 `and` 现在通过 `bool` 实现

之前的 `or` 和 `and` 过滤器和 `bool` 过滤器有着不同的执行模式. 过去使用带有某种过滤器子句
的 `and` / `or` 以及带有其它过滤器子句的 `bool` 是很重要的.

现在这个区别已经被移除了: `bool` 查询现在已经足够聪明来最优地处理这两种情况. 这种改变带来的
结果是, `or` 和 `and` 过滤器现在是语法糖, 它们在 `bool` 查询内部执行.这些过滤器在未来可能会
移除.

==== 废弃 `filtered` 查询 和 `query` 过滤器

由于不再需要 `query` 过滤器, 它已经被废弃 -- 所有查询可以在查询或过滤器上下文中使用.

`filtered` 查询已经被废弃以支持 `bool` 查询. 之前的写法是:

[source,js]
-------------------------
GET _search
{
  "query": {
    "filtered": {
      "query": {
        "match": {
          "text": "quick brown fox"
        }
      },
      "filter": {
        "term": {
          "status": "published"
        }
      }
    }
  }
}
-------------------------

将查询和过滤器移动到 `bool` 查询中的 `must` 和 `filter` 参数:

[source,js]
-------------------------
GET _search
{
  "query": {
    "bool": {
      "must": {
        "match": {
          "text": "quick brown fox"
        }
      },
      "filter": {
        "term": {
          "status": "published"
        }
      }
    }
  }
}
-------------------------

==== 过滤器自动缓存

过去可以使用 `_cache` 参数来控制哪个过滤器可以被缓存并提供自定义 `_cache_key`. 这些选项现在
已经被移除了, 即使提供了也将被忽略.

当这样做很有意义的时候, 过滤器上下文中使用的查询子句现在可以自动缓存. 缓存算法会考虑使用的频率,
查询执行的代价以及构建过滤器的代价.

`terms` 过滤器查找机制不再缓存包含条件的文档值. 它现在依赖于文件系统缓存. 如果查找索引不是非常
大, 推荐通过设置 `index.auto_expand_replicas: 0-all` 来将其复制到所有节点以消除网络开销.

==== 数字查询使用 IDF 计分

以前数字字段上的条件查询被有意禁止使用 Lucene 的计分逻辑并且由于一些不可预料的情况这种行为是非法的.

数字字段上的单个 `term` 查询现在和字符串字段的计分方式一样, 使用 IDF 和 基准 (如果启用了的话).

想要查询数字字段而不用计算分数, 可以在过滤器上下文中使用查询子句. 例如在 `bool` 查询的 `filter`
参数中或包装到 `constant_score` 查询中:

[source,js]
----------------------------
GET _search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": { <1>
            "numeric_tag": 5
          }
        }
      ],
      "filter": [
        {
          "match": { <2>
            "count": 5
          }
        }
      ]
    }
  }
}
----------------------------
<1> 这个子句将 IDF 包含进相关性分数计算中.
<2> 这个子句不会影响相关性分数.

==== 模糊性和 fuzzy-like-this

模糊匹配用来计算每个模糊选项的分数, 意思是鲜有拼写错误的选项的得分高于一般正确拼写的选项.
现在, 模糊匹配混合所有模糊选项的分数来使用出现最频繁选项的IDF.

模糊性不再使用百分比来指定, 但是应该使用允许编辑的数字:

* `0`, `1`, `2`, 或...
* `AUTO` (它基于词的长度来选择 `0`, `1`,  或 `2`)

`fuzzy_like_this` 和 `fuzzy_like_this_field` 查询使用了一个非常昂贵的方法来进行模糊匹配,
因此已经被移除.

==== More Like This

More Like This (`mlt`) API 以及 `more_like_this_field` (`mlt_field`)
查询已经被移除以支持 <<query-dsl-mlt-query, `more_like_this`>> 查询.

`percent_terms_to_match` 参数已经被移除以支持 `minimum_should_match`.

==== 废弃 `limit` 过滤器

`limit` 过滤器已经被废弃并且变成一个空操作. 你可以使用 <<search-request-body,terminate_after>> 参数
来实现类似的行为.

==== Java插件注册自定义查询

Java插件可以使用 `IndicesQueriesModule#addQuery(Class<? extends QueryParser>)` 方法
来注册自定义查询. 其它注册自定义查询方式现在不再支持.
