[[breaking_20_scripting_changes]]
=== 脚本变更

==== 脚本语法

脚本的语法在所有 API 间变得一致. 可接受的格式如下:

内联/动态脚本::
+
--

[source,js]
---------------
"script": {
  "inline": "doc['foo'].value + val", <1>
  "lang":   "groovy", <2>
  "params": { "val": 3 } <3>
}
---------------
<1> 要执行的内联脚本.
<2> 脚本的可选语言.
<3> 任何命名参数.
--

索引脚本::
+
--
[source,js]
---------------
"script": {
  "id":     "my_script_id", <1>
  "lang":   "groovy", <2>
  "params": { "val": 3 } <3>
}
---------------
<1> 索引的脚本ID.
<2> 脚本的可选语言.
<3> 任何命名参数.
--

文件脚本::
+
--
[source,js]
---------------
"script": {
  "file":   "my_file", <1>
  "lang":   "groovy", <2>
  "params": { "val": 3 } <3>
}
---------------
<1> 脚本文件的文件名, 没有 `.lang` 后缀.
<2> 脚本的可选语言.
<3> 任何命名参数.
--

例如, 一个更新请求看起来可能像下面这样:

[source,js]
---------------
POST my_index/my_type/1/_update
{
  "script": {
    "inline": "ctx._source.count += val",
    "params": { "val": 3 }
  },
  "upsert": {
    "count": 0
  }
}
---------------

存在一个简短的语法, 可以在默认的脚本语言中运行内联脚本而不带任何参数:

[source,js]
----------------
GET _search
{
  "script_fields": {
    "concat_fields": {
      "script": "doc['one'].value + ' ' + doc['two'].value"
    }
  }
}
----------------

==== 脚本设置

`script.disable_dynamic` 节点设置已经被 <<migration-script-settings>> 中描述的更细
粒度的脚本所替代.

==== Groovy脚本沙箱

Groovy沙箱以及相关的设置已经被移除. Groovy现在是一种无沙箱的脚本语言, 没有任何选项可用来打开沙箱.

==== 使用脚本的插件

使用脚本的插件必须通过 `ScriptModule` 注册它们自己的脚本上下文. 脚本上下文可以用作细粒度设置的一部分来选择性地启用/禁用脚本.
