[[breaking_20_crud_and_routing_changes]]
=== CRUD和路由变更

==== 显示的自定义路由

自定义 `routing` 值不再从文档主体中提取, 但是必须作为查询字符串的一部分或 在 <<docs-bulk,`bulk`>> API 中
的元数据行中显示地指定. 参考 <<migration-meta-fields>> 中的示例.

==== 路由哈希函数

用于路由的默认哈希函数已经从`djb2` 变为 `murmur3`. 这种改变是透明的, 除非你依赖 `djb2` 的
一个非常特定的属性. 这将有助于确保分片间文档数量有一个更好的平衡.

另外, 下面的路由相关的节点设置已经被废弃:

`cluster.routing.operation.hash.type`::

  这是一个没有文档记载的设置, 它允许配置路由使用哪种哈希算法. `murmur3` 现在被强制使用在新索引上.

`cluster.routing.operation.use_type`::

  这是一个没有文档记载的设置, 它允许计算分片时考虑文档的 `_type` (默认值: `false`). `false`
  现在被强制使用在新索引上.

==== 使用自定义路由的删除 API

删除 API 过去被广播到索引中的所有分片, 这意味着, 当使用自定义路由时, `routing` 参数是可选的.
现在, 删除请求只会转发给持有文档的分片. 当删除文档时, 如果你使用自定义路由, 那么你应该指定 `routing` 值,
正如 `index`, `create` 以及 `update` API 已经要求的那样.

为了确保你不会忘记路由值, 下面的映射让路由必须:

[source,js]
---------------------------
PUT my_index
{
  "mappings": {
    "my_type": {
      "_routing": {
        "required": true
      }
    }
  }
}
---------------------------

==== 默认返回所有存储的元字段

之前, 如果明确使用 `fields` 参数发起请求, 像 `_routing`, `_timestamp` 等这样的元字段只
会包括在一个 GET 请求中.  现在默认会返回有存储值的所有元字段. 另外, 它们会在顶层返回 (和
`_index`, `_type` 以及 `_id` 一样) 而不是在 `fields` 元素中.

例如下面的请求:

[source,sh]
---------------
GET /my_index/my_type/1
---------------

可能会返回:

[source,js]
---------------
{
  "_index":     "my_index",
  "_type":      "my_type",
  "_id":        "1",
  "_timestamp": 10000000, <1>
  "_source": {
    "foo" : [ "bar" ]
  }
}
---------------
<1> `_timestamp` 默认返回 ，并且在最顶层.


==== 异步复制

`replication` 参数已经从所有 CRUD 操作(`index`, `create`,  `update`, `delete`, `bulk`)
中移除, 因为它干扰了 <<indices-synced-flush,synced flush>> 功能. 这些操作现在都是同步的
并且分片组中的变更被复制到所有活动分片时请求只会返回一次.

相反, 使用更多的客户端进程来并行的发送更多请求.

==== 必须指定不带类型包装器的文档

之前文档主体可以被包装到另一个和 `type` 名称相同的对象中:

[source,js]
--------------------------
PUT my_index/my_type/1
{
  "my_type": { <1>
    "text": "quick brown fox"
  }
}
--------------------------
<1> `my_type` 包装器不是文档的一部分, 但是代表文档类型.

这个功能已经被废弃但是可以使用 `mapping.allow_type_wrapper` 这个索引设置重新启用. 将不再
支持这个设置. 上面的文档应该使用如下方式索引:

[source,js]
--------------------------
PUT my_index/my_type/1
{
  "text": "quick brown fox"
}
--------------------------

==== Term Vectors API

`/_termvector` 的使用已被废弃以支持 `/_termvectors`.
