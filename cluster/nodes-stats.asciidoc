[[cluster-nodes-stats]]
== 节点统计

[float]
=== 节点统计数据

集群节点统计 API 允许检索一个或多个 (或所有) 集群节点的统计数据.

[source,js]
--------------------------------------------------
curl -XGET 'http://localhost:9200/_nodes/stats'
curl -XGET 'http://localhost:9200/_nodes/nodeId1,nodeId2/stats'
--------------------------------------------------

第一个命令检索集群中多有节点的统计数据. 第二个命令有选择性的只检索 `nodeId1` 和 `nodeId2` 这两个节点的统计数据. 所有节点选择性选项都在 <<cluster-nodes,这里>> 有解释.

默认返回所有统计数据. 你也可以通过 `indices`, `os`, `process`, `jvm`, `transport`, `http`,
`fs`, `breaker` 和 `thread_pool` 的任何组合来限制它. 例如:

[horizontal]
`indices`::
	索引统计数据, 包括大小, 文档数量, 索引和删除时间, 搜索时间, 字段缓存大小, 合并和刷新

`fs`::
	文件系统信息, 数据路径, 空闲的磁盘空间, 读/写 统计 (参见 <<fs-info,文件系统信息>>)

`http`::
	HTTP 连接信息

`jvm`::
	JVM 统计数据, 内存池信息, 垃圾回收, 缓冲池, 已加载和未加载的类的数量

`os`::
	操作系统统计数据, 平均负载, 内存, 交换空间 (参见 <<os-stats,操作系统统计数据>>)

`process`::
	进程统计数据, 内存消耗, cpu使用, 打开的文件描述符 (参见 <<process-stats,进程统计数据>>)

`thread_pool`::
	每个线程池的统计数据, 包括当前的大小, 队列以及被拒绝的任务数量

`transport`::
	关于集群通信中发送和接收的字节数的传输统计数据

`breaker`::
	有关字段数据断路器的统计数据

[source,js]
--------------------------------------------------
# 返回索引和操作系统统计数据
curl -XGET 'http://localhost:9200/_nodes/stats/os'
# 只返回操作系统和进程统计数据
curl -XGET 'http://localhost:9200/_nodes/stats/os,process'
# 指定的类型端点
curl -XGET 'http://localhost:9200/_nodes/stats/process'
curl -XGET 'http://localhost:9200/_nodes/10.0.0.1/stats/process'
--------------------------------------------------

`all` 标识可以设置用于返回所有统计数据.

[float]
[[fs-info]]
==== 文件系统信息

`fs` 标识可以设置用于检索有关文件系统信息:

`fs.timestamp`::
	文件存储统计数据最后一次刷新时间

`fs.total.total_in_bytes`::
	所有文件存储的总字节大小

`fs.total.free_in_bytes`::
	所有文件存储中未分配的总字节大小

`fs.total.available_in_bytes`::
	该Java虚拟机在所有文件存储上可用的总字节大小

`fs.data`::
	所有文件存储列表

`fs.data.path`::
	文件存储的路径

`fs.data.mount`::
	文件存储的挂载点 (例如: /dev/sda2)

`fs.data.type`::
	文件存储类型 (例如: ext4)

`fs.data.total_in_bytes`::
	文件存储的总字节大小

`fs.data.free_in_bytes`::
	文件存储中未分配的总字节大小

`fs.data.available_in_bytes`::
	该Java虚拟机在该文件存储上可用的总字节大小

`fs.data.spins` (仅用于Linux系统)::
	表明文件存储是否支持旋转存储. `null` 意味着我们不能决定它, `true` 意味着设备可能是旋转的, 而 `false` 意味着不是 (例如: 固态硬盘).

[float]
[[os-stats]]
==== 操作系统统计数据

`os` 标识可以设置用于检索有关操作系统的统计数据:

`os.timestamp`::
	操作系统统计数据最后一次刷新时间

`os.load_average`::
	最后一分钟的系统平均负载, 或者如果不支持的话返回 -1

`os.mem.total_in_bytes`::
	物理内存总字节大小

`os.mem.free_in_bytes`::
	空闲的物理内存字节大小

`os.mem.free_percent`::
	空闲的内存百分比

`os.mem.used_in_bytes`::
	已使用的物理内存字节大小

`os.mem.used_percent`::
	已使用的内存百分比

`os.swap.total_in_bytes`::
	交换空间总字节大小

`os.swap.free_in_bytes`::
	空闲的交换空间字节大小

`os.swap.used_in_bytes`::
	已使用的交换空间字节大小


[float]
[[process-stats]]
==== 进程统计数据

`process` 标识可以设置用于检索有关当前运行进程的统计数据:

`process.timestamp`::
	进程统计数据最后一次的刷新时间

`process.open_file_descriptors`::
	和当前进程有关的打开的文件描述符数量, 如果不支持的话则为 -1

`process.max_file_descriptors`::
	系统允许最大的文件描述符数量, 如果不支持的话则为 -1

`process.cpu.percent`::
	CPU使用百分比, 如果在计算统计数据的时候不知道则为-1

`process.cpu.total_in_millis`::
	运行中的Java虚拟机上的进程使用的CPU时间 (单位是毫秒) , 如果不支持的话则为 -1

`process.mem.total_virtual_in_bytes`::
	运行进程时保证可用的虚拟内存字节大小


[float]
[[field-data]]
=== 字段数据统计数据

你可以获取节点级别或索引级别上字段数据内存使用信息.

[source,js]
--------------------------------------------------
# 节点统计数据
curl -XGET 'http://localhost:9200/_nodes/stats/indices/?fields=field1,field2&pretty'

# 索引统计数据
curl -XGET 'http://localhost:9200/_stats/fielddata/?fields=field1,field2&pretty'

# 你可以在字段名称使用通配符
curl -XGET 'http://localhost:9200/_stats/fielddata/?fields=field*&pretty'
curl -XGET 'http://localhost:9200/_nodes/stats/indices/?fields=field*&pretty'
--------------------------------------------------

[float]
[[search-groups]]
=== 搜索组

对于节点上执行的搜索你可以获取有关搜索组的统计数据.

[source,js]
--------------------------------------------------
# 所有组的所有统计数据
curl -XGET 'http://localhost:9200/_nodes/stats?pretty&groups=_all'

# 索引统计数据中的几个组
curl -XGET 'http://localhost:9200/_nodes/stats/indices?pretty&groups=foo,bar'
--------------------------------------------------
