[[cat-health]]
== cat 健康

`health` 是从 `/_cluster/health` 获取同样信息的一个简洁的, 一行表示. 它有一个用于禁用时间戳的选项 `ts`.

[source,sh]
--------------------------------------------------
% curl 192.168.56.10:9200/_cat/health
1384308967 18:16:07 foo green 3 3 3 3 0 0 0
% curl '192.168.56.10:9200/_cat/health?v&ts=0'
cluster status nodeTotal nodeData shards pri relo init unassign tasks
foo     green          3        3      3   3    0    0        0     0
--------------------------------------------------

这个命令的通常用法是校验所有节点的健康状况是一致的:

[source,sh]
--------------------------------------------------
% pssh -i -h list.of.cluster.hosts curl -s localhost:9200/_cat/health
[1] 20:20:52 [SUCCESS] es3.vm
1384309218 18:20:18 foo green 3 3 3 3 0 0 0 0
[2] 20:20:52 [SUCCESS] es1.vm
1384309218 18:20:18 foo green 3 3 3 3 0 0 0 0
[3] 20:20:52 [SUCCESS] es2.vm
1384309218 18:20:18 foo green 3 3 3 3 0 0 0 0
--------------------------------------------------

一个不常使用的方式是跟踪一个大型集群的恢复时间. 当有足够数量的分片时, 启动一个集群或者甚至是失去一个节点后的恢复都可能需要花费点时间 (取决于你的网络和磁盘).跟踪其进展的一种方式是在一个延迟的循环中使用这个命令:

[source,sh]
--------------------------------------------------
% while true; do curl 192.168.56.10:9200/_cat/health; sleep 120; done
1384309446 18:24:06 foo red 3 3 20 20 0 0 1812 0
1384309566 18:26:06 foo yellow 3 3 950 916 0 12 870 0
1384309686 18:28:06 foo yellow 3 3 1328 916 0 12 492 0
1384309806 18:30:06 foo green 3 3 1832 916 4 0 0
^C
--------------------------------------------------

在上述场景中, 我们可以看出恢复大概花了四分钟. 如果这持续了几个小时, 我们可以看到 `UNASSIGNED` 分片数量急剧下降. 如果这个数字保持不变, 我们就可以认为出现问题了.

[float]
[[timestamp]]
=== 为什么使用时间戳?

当集群出现故障时你通常在使用 `health` 命令. 在这期间, 将日志文件,报警系统等的活动关联起来是极其重要的.

有两种输出. `HH:MM:SS` 输出只是为了快速地消费. 新纪元时间保留了更多的信息, 包括日期, 并且如果你的恢复跨天它是机器可排序的.
