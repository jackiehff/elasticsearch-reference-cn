[[cat-thread-pool]]
== cat 线程池

`thread_pool` 命令显示了集群中每个节点比较全面的线程池统计数据. bulk, 索引和搜索线程池默认不会返回活动,队列和被拒绝统计信息.

[source,sh]
--------------------------------------------------
% curl 192.168.56.10:9200/_cat/thread_pool
host1 192.168.1.35 0 0 0 0 0 0 0 0 0
host2 192.168.1.36 0 0 0 0 0 0 0 0 0
--------------------------------------------------

前两列包含节点的主机和IP.

[source,sh]
--------------------------------------------------
host      ip
host1 192.168.1.35
host2 192.168.1.36
--------------------------------------------------

接下来的三列显示了bulk线程池中活动队列和被拒绝的队列的统计信息.

[source,sh]
--------------------------------------------------
bulk.active bulk.queue bulk.rejected
          0          0             0
--------------------------------------------------

剩下的列分别显示了索引和搜索线程池的活动队列和被拒绝队列的统计信息.

不同线程池的其它统计数据也可以通过使用 `h` (头部) 参数来检索.

[source,sh]
--------------------------------------------------
% curl 'localhost:9200/_cat/thread_pool?v&h=id,host,suggest.active,suggest.rejected,suggest.completed'
host      suggest.active suggest.rejected suggest.completed
host1                  0                0                 0
host2                  0                0                 0
--------------------------------------------------

这里展示了 host 列以及 suggest线程池的活动的, 被拒绝的和已完成的线程统计数据. suggest 线程池默认不会显示, 因此你总是需要指定你想要展示的统计数据.

[float]
=== 可用的线程池

当前可用的 <<modules-threadpool,线程池>>:

[cols="<,<,<",options="header"]
|=======================================================================
|线程池 |别名 |描述
|`bulk` |`b` | <<docs-bulk,bulk>> 操作使用的线程池
|`flush` |`f` | <<indices-flush,flush>> 操作使用的线程池
|`generic` |`ge` |用于一般操作的线程池 (例如, 后台节点发现)
|`get` |`g` | <<docs-get,get>> 操作使用的线程池
|`index` |`i` | <<docs-index_,index>>/<<docs-delete,delete>> 操作使用的线程池
|`management` |`ma` |用于 Elasticsearch 管理的线程池 (例如, 集群管理)
|`optimize` |`o` | <<indices-optimize,optimize>> 操作使用的线程池
|`percolate` |`p` | <<search-percolate,percolator>> 操作使用的线程池
|`refresh` |`r` | <<indices-refresh,refresh>> 操作使用的线程池
|`search` |`s` | <<search-search,search>>/<<search-count,count>> 操作使用的线程池
|`snapshot` |`sn` | <<modules-snapshots,snapshot>> 操作使用的线程池
|`suggest` |`su` | <<search-suggesters,suggester>> 操作使用的线程池
|`warmer` |`w` | <<indices-warmers,index warm-up>> 操作使用的线程池
|=======================================================================

线程池名称 (或别名) 必须和下面的一个线程池字段相结合来检索请求的信息.

[float]
==== 线程池字段

对于每个线程池, 你可以使用下面表格中的字段名称来加载关于线程池的详细信息, 既可以使用全字段名 (例如 `bulk.active`) 也可以使用字段 (例如 `sa` 等同于 `search.active`).

[cols="<,<,<",options="header"]
|=======================================================================
|字段名 |别名 |描述
|`type` |`t` |线程池当前类型 (*) (`cached`, `fixed` 或 `scaling`)
|`active` |`a` |当前线程池中活跃线程数量
|`size` |`s` |当前线程池中的线程数量
|`queue` |`q` |当前线程池队列中任务数量
|`queueSize` |`qs` |当前线程池队列中最大任务数量
|`rejected` |`r` |当前线程池中被拒绝的线程数
|`largest` |`l` |当前线程池中活动线程的最高值
|`completed` |`c` |当前线程池中已完成的线程数
|`min` |`mi` |当前线程池中允许配置的最小活动线程数量
|`max` |`ma` |当前线程池中允许配置的最大活动线程数量
|`keepAlive` |`k` |线程配置的生存时间
|=======================================================================

[float]
=== 其它字段

除了关于每个线程池的详细信息之外, 也可以很方便的了解到这些线程池在哪儿. 同样的你也可以请求其它像相应节点的  `ip` 这样的详细信息.

[cols="<,<,<",options="header"]
|=======================================================================
|字段名 |别名 |描述
|`id` |`nodeId` |唯一的节点 ID
|`pid` |`p` |运行节点的进程 ID
|`host` |`h` |当前节点的主机名
|`ip` |`i` |当前节点的IP地址
|`port` |`po` |当前节点绑定的传输端口
|=======================================================================
